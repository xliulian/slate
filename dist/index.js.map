{"version":3,"file":"index.js","sources":["../../../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArray.js","../../../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../../../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../../../node_modules/@babel/runtime/helpers/toConsumableArray.js","../../../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../../../node_modules/@babel/runtime/helpers/nonIterableRest.js","../../../node_modules/@babel/runtime/helpers/slicedToArray.js","../../../node_modules/@babel/runtime/helpers/defineProperty.js","../src/utils/weak-maps.ts","../src/create-editor.ts","../../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../src/utils/string.ts","../src/interfaces/element.ts","../src/interfaces/editor.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts"],"sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Transforms.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: () => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor)\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const child = node.children[i] as Descendant\n        const prev = node.children[i - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation): Path[] => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path, Descendant, ExtendedType, Ancestor } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface BaseElement {\n  children: Descendant[]\n  childrenOrderedBy?: string | string[]\n}\n\nexport type Element = ExtendedType<'Element', BaseElement>\n\nexport interface ElementInterface {\n  isAncestor: (value: any) => value is Ancestor\n  isElement: (value: any) => value is Element\n  isElementList: (value: any) => value is Element[]\n  isElementProps: (props: any) => props is Partial<Element>\n  matches: (element: Element, props: Partial<Element>) => boolean\n}\n\nexport const Element: ElementInterface = {\n  /**\n   * Check if a value implements the 'Ancestor' interface.\n   */\n\n  isAncestor(value: any): value is Ancestor {\n    return isPlainObject(value) && Node.isNodeList(value.children)\n  },\n\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return Array.isArray(value) && value.every(val => Element.isElement(val))\n  },\n\n  /**\n   * Check if a set of props is a partial of Element.\n   */\n\n  isElementProps(props: any): props is Partial<Element> {\n    return (props as Partial<Element>).children !== undefined\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import isPlainObject from 'is-plain-object'\nimport { createDraft, finishDraft, isDraft } from 'immer'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  ExtendedType,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\nimport { Descendant } from './node'\nimport { Element } from './element'\n\nexport type BaseSelection = Range | null\n\nexport type Selection = ExtendedType<'Selection', BaseSelection>\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface BaseEditor {\n  children: Descendant[]\n  selection: Selection\n  operations: Operation[]\n  marks: Omit<Text, 'text'> | null\n  childrenOrderedBy?: string | string[]\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: () => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport type Editor = ExtendedType<'Editor', BaseEditor>\n\nexport interface EditorInterface {\n  above: <T extends Ancestor>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  addMark: (editor: Editor, key: string, value: any) => void\n  after: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  before: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    }\n  ) => Point | undefined\n  deleteBackward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteForward: (\n    editor: Editor,\n    options?: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  ) => void\n  deleteFragment: (editor: Editor) => void\n  edges: (editor: Editor, at: Location) => [Point, Point]\n  end: (editor: Editor, at: Location) => Point\n  first: (editor: Editor, at: Location) => NodeEntry\n  fragment: (editor: Editor, at: Location) => Descendant[]\n  hasBlocks: (editor: Editor, element: Element) => boolean\n  hasInlines: (editor: Editor, element: Element) => boolean\n  hasTexts: (editor: Editor, element: Element) => boolean\n  insertBreak: (editor: Editor) => void\n  insertFragment: (editor: Editor, fragment: Node[]) => void\n  insertNode: (editor: Editor, node: Node) => void\n  insertText: (editor: Editor, text: string) => void\n  isBlock: (editor: Editor, value: any) => value is Element\n  isEditor: (value: any) => value is Editor\n  isEnd: (editor: Editor, point: Point, at: Location) => boolean\n  isEdge: (editor: Editor, point: Point, at: Location) => boolean\n  isEmpty: (editor: Editor, element: Element) => boolean\n  isInline: (editor: Editor, value: any) => value is Element\n  isNormalizing: (editor: Editor) => boolean\n  isStart: (editor: Editor, point: Point, at: Location) => boolean\n  isVoid: (editor: Editor, value: any) => value is Element\n  last: (editor: Editor, at: Location) => NodeEntry\n  leaf: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Text>\n  levels: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  marks: (editor: Editor) => Omit<Text, 'text'> | null\n  next: <T extends Descendant>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  node: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry\n  nodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator<NodeEntry<T>, void, undefined>\n  normalize: (\n    editor: Editor,\n    options?: {\n      force?: boolean\n    }\n  ) => void\n  parent: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => NodeEntry<Ancestor>\n  path: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      depth?: number\n      edge?: 'start' | 'end'\n    }\n  ) => Path\n  pathRef: (\n    editor: Editor,\n    path: Path,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PathRef\n  pathRefs: (editor: Editor) => Set<PathRef>\n  point: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      edge?: 'start' | 'end'\n    }\n  ) => Point\n  pointRef: (\n    editor: Editor,\n    point: Point,\n    options?: {\n      affinity?: 'backward' | 'forward' | null\n    }\n  ) => PointRef\n  pointRefs: (editor: Editor) => Set<PointRef>\n  positions: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n    }\n  ) => Generator<Point, void, undefined>\n  previous: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<T> | undefined\n  range: (editor: Editor, at: Location, to?: Location) => Range\n  rangeRef: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    }\n  ) => RangeRef\n  rangeRefs: (editor: Editor) => Set<RangeRef>\n  removeMark: (editor: Editor, key: string) => void\n  start: (editor: Editor, at: Location) => Point\n  string: (\n    editor: Editor,\n    at: Location,\n    options?: {\n      voids?: boolean\n    }\n  ) => string\n  unhangRange: (\n    editor: Editor,\n    range: Range,\n    options?: {\n      voids?: boolean\n    }\n  ) => Range\n  void: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => NodeEntry<Element> | undefined\n  withoutNormalizing: (editor: Editor, fn: () => void) => void\n}\n\nexport const Editor: EditorInterface = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      voids?: boolean\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(editor: Editor): void {\n    editor.deleteFragment()\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    return (\n      isPlainObject(value) &&\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    )\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n, p)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Omit<Text, 'text'> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Descendant>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointAfterLocation = Editor.after(editor, at, { voids })\n\n    if (!pointAfterLocation) return\n\n    const [, to] = Editor.last(editor, [])\n\n    const span: Span = [pointAfterLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<NodeEntry<T>, void, undefined> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const nodeEntries = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of nodeEntries) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node, path)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ): void {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const dirtyPath = getDirtyPaths(editor).pop()!\n\n        // If the node doesn't exist in the tree, it does not need to be normalized.\n        if (Node.has(editor, dirtyPath)) {\n          const entry = Editor.node(editor, dirtyPath)\n          editor.normalizeNode(entry)\n        }\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Iterate through all of the positions in the document where a `Point` can be\n   * placed.\n   *\n   * By default it will move forward by individual offsets at a time,  but you\n   * can pass the `unit: 'character'` option to moved forward one character, word,\n   * or line at at time.\n   *\n   * Note: By default void nodes are treated as a single point and iteration\n   * will not happen inside their content unless you pass in true for the\n   * voids option, then iteration will occur.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Generator<Point, void, undefined> {\n    const {\n      at = editor.selection,\n      unit = 'offset',\n      reverse = false,\n      voids = false,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let string = ''\n    let available = 0\n    let offset = 0\n    let distance: number | null = null\n    let isNewBlock = false\n\n    const advance = () => {\n      if (distance == null) {\n        if (unit === 'character') {\n          distance = getCharacterDistance(string)\n        } else if (unit === 'word') {\n          distance = getWordDistance(string)\n        } else if (unit === 'line' || unit === 'block') {\n          distance = string.length\n        } else {\n          distance = 1\n        }\n\n        string = string.slice(distance)\n      }\n\n      // Add or substract the offset.\n      offset = reverse ? offset - distance : offset + distance\n      // Subtract the distance traveled from the available text.\n      available = available - distance!\n      // If the available had room to spare, reset the distance so that it will\n      // advance again next time. Otherwise, set it to the overflow amount.\n      distance = available >= 0 ? null : 0 - available\n    }\n\n    for (const [node, path] of Editor.nodes(editor, { at, reverse, voids })) {\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, so by default we will always\n        // yield their first point. If the voids option is set to true,\n        // then we will iterate over their content\n        if (!voids && editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        if (editor.isInline(node)) {\n          continue\n        }\n\n        if (Editor.hasInlines(editor, node)) {\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          const text = Editor.string(editor, { anchor: s, focus: e }, { voids })\n          string = reverse ? reverseText(text) : text\n          isNewBlock = true\n        }\n      }\n\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n        available = node.text.length\n        offset = reverse ? available : 0\n\n        if (isFirst) {\n          available = reverse ? first.offset : available - first.offset\n          offset = first.offset\n        }\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset }\n        }\n\n        while (true) {\n          // If there's no more string, continue to the next block.\n          if (string === '') {\n            break\n          } else {\n            advance()\n          }\n\n          // If the available space hasn't overflow, we have another point to\n          // yield in the current text node.\n          if (available >= 0) {\n            yield { path, offset }\n          } else {\n            break\n          }\n        }\n\n        isNewBlock = false\n      }\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const pointBeforeLocation = Editor.before(editor, at, { voids })\n\n    if (!pointBeforeLocation) {\n      return\n    }\n\n    const [, to] = Editor.first(editor, [])\n\n    // The search location is from the start of the document to the path of\n    // the point before the location passed in\n    const span: Span = [pointBeforeLocation.path, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: by default the text of void nodes is considered to be an empty\n   * string, regardless of content, unless you pass in true for the voids option\n   */\n\n  string(\n    editor: Editor,\n    at: Location,\n    options: {\n      voids?: boolean\n    } = {}\n  ): string {\n    const { voids = false } = options\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n      voids,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: n => Text.isText(n) || editor.isInline(n) && editor.isVoid(n),\n      reverse: true,\n      voids,\n    })) {\n      if (!Text.isText(node)) {\n        // no unhang for inline void\n        end = Editor.start(editor, path)\n        break\n      }\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n    if (Point.isBefore(end, start)) {\n      end = start\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\nexport type NodeMatch<T extends Node> =\n  | ((node: Node, path: Path) => node is T)\n  | ((node: Node, path: Path) => boolean)\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport interface LocationInterface {\n  isLocation: (value: any) => value is Location\n}\n\nexport const Location: LocationInterface = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport interface SpanInterface {\n  isSpan: (value: any) => value is Span\n}\n\nexport const Span: SpanInterface = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Path, Range, Text } from '..'\nimport { Element, ElementEntry } from './element'\nimport { ExtendedType } from './custom-types'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type BaseNode = Editor | Element | Text\nexport type Node = ExtendedType<'Node', BaseNode>\n\nexport interface NodeInterface {\n  ancestor: (root: Node, path: Path) => Ancestor\n  ancestors: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Ancestor>, void, undefined>\n  child: (root: Node, index: number) => Descendant\n  children: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  common: (root: Node, path: Path, another: Path) => NodeEntry\n  descendant: (root: Node, path: Path) => Descendant\n  descendants: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n  elements: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<ElementEntry, void, undefined>\n  extractProps: (node: Node) => NodeProps\n  first: (root: Node, path: Path) => NodeEntry\n  fragment: (root: Node, range: Range) => Descendant[]\n  get: (root: Node, path: Path) => Node\n  has: (root: Node, path: Path) => boolean\n  isNode: (value: any) => value is Node\n  isNodeList: (value: any) => value is Node[]\n  last: (root: Node, path: Path) => NodeEntry\n  leaf: (root: Node, path: Path) => Text\n  levels: (\n    root: Node,\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  matches: (node: Node, props: Partial<Node>) => boolean\n  nodes: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry, void, undefined>\n  parent: (root: Node, path: Path) => Ancestor\n  string: (node: Node) => string\n  texts: (\n    root: Node,\n    options?: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    }\n  ) => Generator<NodeEntry<Text>, void, undefined>\n}\n\nexport const Node: NodeInterface = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Extract props from a Node.\n   */\n\n  extractProps(node: Node): NodeProps {\n    if (Element.isAncestor(node)) {\n      const { children, ...properties } = node\n\n      return properties\n    } else {\n      const { text, ...properties } = node\n\n      return properties\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce({ children: root.children }, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      if (Editor.isEditor(r)) delete r.selection\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    return Array.isArray(value) && value.every(val => Node.isNode(val))\n  },\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) &&\n        Element.isElementProps(props) &&\n        Element.matches(node, props)) ||\n      (Text.isText(node) &&\n        Text.isTextProps(props) &&\n        Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't descended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n\n/**\n * Convenience type for returning the props of a node.\n */\nexport type NodeProps =\n  | Omit<Editor, 'children'>\n  | Omit<Element, 'children'>\n  | Omit<Text, 'text'>\n","import { ExtendedType, Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type BaseInsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n}\n\nexport type InsertNodeOperation = ExtendedType<\n  'InsertNodeOperation',\n  BaseInsertNodeOperation\n>\n\nexport type BaseInsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type InsertTextOperation = ExtendedType<\n  'InsertTextOperation',\n  BaseInsertTextOperation\n>\n\nexport type BaseMergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type MergeNodeOperation = ExtendedType<\n  'MergeNodeOperation',\n  BaseMergeNodeOperation\n>\n\nexport type BaseMoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n}\n\nexport type MoveNodeOperation = ExtendedType<\n  'MoveNodeOperation',\n  BaseMoveNodeOperation\n>\n\nexport type BaseRemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n}\n\nexport type RemoveNodeOperation = ExtendedType<\n  'RemoveNodeOperation',\n  BaseRemoveNodeOperation\n>\n\nexport type BaseRemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type RemoveTextOperation = ExtendedType<\n  'RemoveTextOperation',\n  BaseRemoveTextOperation\n>\n\nexport type BaseSetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n}\n\nexport type SetNodeOperation = ExtendedType<\n  'SetNodeOperation',\n  BaseSetNodeOperation\n>\n\nexport type BaseSetSelectionOperation =\n  | {\n      type: 'set_selection'\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      properties: Range\n      newProperties: null\n    }\n\nexport type SetSelectionOperation = ExtendedType<\n  'SetSelectionOperation',\n  BaseSetSelectionOperation\n>\n\nexport type BaseSplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type SplitNodeOperation = ExtendedType<\n  'SplitNodeOperation',\n  BaseSplitNodeOperation\n>\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport interface OperationInterface {\n  isNodeOperation: (value: any) => value is NodeOperation\n  isOperation: (value: any) => value is Operation\n  isOperationList: (value: any) => value is Operation[]\n  isSelectionOperation: (value: any) => value is SelectionOperation\n  isTextOperation: (value: any) => value is TextOperation\n  inverse: (op: Operation) => Operation\n}\n\nexport const Operation: OperationInterface = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) && value.every(val => Operation.isOperation(val))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport interface PathInterface {\n  ancestors: (path: Path, options?: { reverse?: boolean }) => Path[]\n  common: (path: Path, another: Path) => Path\n  compare: (path: Path, another: Path) => -1 | 0 | 1\n  endsAfter: (path: Path, another: Path) => boolean\n  endsAt: (path: Path, another: Path) => boolean\n  endsBefore: (path: Path, another: Path) => boolean\n  equals: (path: Path, another: Path) => boolean\n  hasPrevious: (path: Path) => boolean\n  isAfter: (path: Path, another: Path) => boolean\n  isAncestor: (path: Path, another: Path) => boolean\n  isBefore: (path: Path, another: Path) => boolean\n  isChild: (path: Path, another: Path) => boolean\n  isCommon: (path: Path, another: Path) => boolean\n  isDescendant: (path: Path, another: Path) => boolean\n  isParent: (path: Path, another: Path) => boolean\n  isPath: (value: any) => value is Path\n  isSibling: (path: Path, another: Path) => boolean\n  levels: (\n    path: Path,\n    options?: {\n      reverse?: boolean\n    }\n  ) => Path[]\n  next: (path: Path) => Path\n  parent: (path: Path) => Path\n  previous: (path: Path) => Path\n  relative: (path: Path, ancestor: Path) => Path\n  transform: (\n    path: Path,\n    operation: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Path | null\n}\n\nexport const Path: PathInterface = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    if (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    ) {\n      if (value.length > 0 && typeof value[value.length - 1] !== 'number') {\n        throw new Error(`Invalid path [${value}]`)\n      }\n      return true\n    }\n    return false\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport interface PathRefInterface {\n  transform: (ref: PathRef, op: Operation) => void\n}\n\nexport const PathRef: PathRefInterface = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { ExtendedType, Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface BasePoint {\n  path: Path\n  offset: number\n}\n\nexport type Point = ExtendedType<'Point', BasePoint>\n\nexport interface PointInterface {\n  compare: (point: Point, another: Point) => -1 | 0 | 1\n  isAfter: (point: Point, another: Point) => boolean\n  isBefore: (point: Point, another: Point) => boolean\n  equals: (point: Point, another: Point) => boolean\n  isPoint: (value: any) => value is Point\n  transform: (\n    point: Point,\n    op: Operation,\n    options?: { affinity?: 'forward' | 'backward' | null }\n  ) => Point | null\n}\n\nexport const Point: PointInterface = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport interface PointRefInterface {\n  transform: (ref: PointRef, op: Operation) => void\n}\n\nexport const PointRef: PointRefInterface = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { ExtendedType, Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface BaseRange {\n  anchor: Point\n  focus: Point\n}\n\nexport type Range = ExtendedType<'Range', BaseRange>\n\nexport interface RangeInterface {\n  edges: (\n    range: Range,\n    options?: {\n      reverse?: boolean\n    }\n  ) => [Point, Point]\n  end: (range: Range) => Point\n  equals: (range: Range, another: Range) => boolean\n  includes: (range: Range, target: Path | Point | Range) => boolean\n  intersection: (range: Range, another: Range) => Range | null\n  isBackward: (range: Range) => boolean\n  isCollapsed: (range: Range) => boolean\n  isExpanded: (range: Range) => boolean\n  isForward: (range: Range) => boolean\n  isRange: (value: any) => value is Range\n  points: (range: Range) => Generator<PointEntry, void, undefined>\n  start: (range: Range) => Point\n  transform: (\n    range: Range,\n    op: Operation,\n    options?: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    }\n  ) => Range | null\n}\n\nexport const Range: RangeInterface = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: {\n      affinity?: 'forward' | 'backward' | 'outward' | 'inward' | null\n    } = {}\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport interface RangeRefInterface {\n  transform: (ref: RangeRef, op: Operation) => void\n}\n\nexport const RangeRef: RangeRefInterface = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { Range } from '..'\nimport { ExtendedType } from './custom-types'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface BaseText {\n  text: string\n}\n\nexport type Text = ExtendedType<'Text', BaseText>\n\nexport interface TextInterface {\n  equals: (text: Text, another: Text, options?: { loose?: boolean }) => boolean\n  isText: (value: any) => value is Text\n  isTextList: (value: any) => value is Text[]\n  isTextProps: (props: any) => props is Partial<Text>\n  matches: (text: Text, props: Partial<Text>) => boolean\n  decorations: (node: Text, decorations: Range[]) => Text[]\n}\n\nexport const Text: TextInterface = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    for (const key in text) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    for (const key in another) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && value.every(val => Text.isText(val))\n  },\n\n  /**\n   * Check if some props are a partial of Text.\n   */\n\n  isTextProps(props: any): props is Partial<Text> {\n    return (props as Partial<Text>).text !== undefined\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= o) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n        if (\n          (start.offset !== end.offset &&\n            (start.offset === o || end.offset === offset)) ||\n          start.offset > o ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < o) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport interface GeneralTransforms {\n  transform: (editor: Editor, op: Operation) => void\n}\n\nexport const GeneralTransforms: GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation): void {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children)\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\nimport { NodeMatch } from '../interfaces/editor'\n\nexport interface NodeTransforms {\n  insertNodes: <T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    }\n  ) => void\n  liftNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    }\n  ) => void\n  mergeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  moveNodes: <T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) => void\n  removeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  setNodes: <T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  splitNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    }\n  ) => void\n  unsetNodes: <T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  unwrapNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n  wrapNodes: <T extends Node>(\n    editor: Editor,\n    element: Element,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const NodeTransforms: NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes<T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n =>\n          levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes<T extends Node>(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const properties = Node.extractProps(node)\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes<T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path)\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => Element.isAncestor(node) && node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes<T extends Node>(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n =>\n              Element.isAncestor(commonNode) && commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport interface SelectionTransforms {\n  collapse: (\n    editor: Editor,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  deselect: (editor: Editor) => void\n  move: (\n    editor: Editor,\n    options?: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  select: (editor: Editor, target: Location) => void\n  setPoint: (\n    editor: Editor,\n    props: Partial<Point>,\n    options?: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) => void\n  setSelection: (editor: Editor, props: Partial<Range>) => void\n}\n\nexport const SelectionTransforms: SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor): void {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location): void {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ): void {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>): void {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport interface TextTransforms {\n  delete: (\n    editor: Editor,\n    options?: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: {\n      at?: Location\n      voids?: boolean\n    }\n  ) => void\n}\n\nexport const TextTransforms: TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms: GeneralTransforms &\n  NodeTransforms &\n  SelectionTransforms &\n  TextTransforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n"],"names":["DIRTY_PATHS","WeakMap","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","editor","children","operations","selection","marks","isInline","isVoid","onChange","apply","op","Editor","pathRefs","ref","PathRef","transform","pointRefs","PointRef","rangeRefs","RangeRef","set","Set","dirtyPaths","add","path","key","join","has","push","oldDirtyPaths","get","newDirtyPaths","getDirtyPaths","newPath","Path","Transforms","normalize","type","Promise","resolve","then","addMark","value","Range","isExpanded","setNodes","match","Text","isText","split","deleteBackward","unit","isCollapsed","reverse","deleteForward","deleteFragment","getFragment","Node","fragment","insertBreak","splitNodes","always","insertFragment","insertNode","node","insertNodes","insertText","text","inline","above","n","mode","inlinePath","isEnd","anchor","point","after","setSelection","focus","normalizeNode","entry","Element","isElement","length","child","at","concat","voids","shouldHaveInlines","isEditor","i","prev","isLast","isInlineOrText","removeNodes","newChild","equals","loose","mergeNodes","removeMark","unsetNodes","levels","descendants","Array","from","nodes","p","ancestors","previousPath","previous","oldAncestors","newAncestors","ancestor","nextPath","next","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","offset","charCode","charCodeAt","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","started","char","charAt","l","slice","rest","isWordCharacter","remaining","test","code","isAncestor","isPlainObject","isNodeList","isElementList","isArray","every","val","isElementProps","props","undefined","matches","element","options","edge","end","range","distance","d","target","positions","before","start","edges","first","hasBlocks","some","isBlock","hasInlines","hasTexts","isRange","Operation","isOperationList","Point","isEdge","isStart","isEmpty","isNormalizing","last","leaf","block","prevNode","prevPath","blockPath","pointAfterLocation","to","span","isPath","Error","parent","includes","universal","Span","isSpan","nodeEntries","pass","hit","isLower","compare","emit","force","allPaths","withoutNormalizing","max","m","dirtyPath","pop","parentPath","depth","firstPath","lastPath","common","isPoint","pathRef","affinity","current","unref","refs","pointRef","string","available","isNewBlock","advance","e","s","reverseText","isFirst","pointBeforeLocation","rangeRef","t","unhangRange","endBlock","skip","isBefore","fn","Location","isLocation","root","index","JSON","stringify","c","childPath","another","descendant","elements","extractProps","properties","newRoot","produce","r","splice","isNode","isTextProps","visited","isAfter","nextIndex","map","texts","isNodeOperation","isOperation","endsWith","position","newProperties","isSelectionOperation","isTextOperation","inverse","isSibling","inversePath","inverseNewPath","paths","av","bv","min","Math","endsAfter","as","bs","endsAt","endsBefore","hasPrevious","isChild","isCommon","isDescendant","isParent","al","bl","list","relative","operation","onp","copy","result","isBackward","rs","re","ts","te","isAfterStart","isBeforeEnd","intersection","s1","e1","s2","e2","isForward","points","affinityAnchor","affinityFocus","isTextList","decorations","leaves","dec","o","Object","assign","middle","off","GeneralTransforms","createDraft","truePath","newParent","newIndex","newNode","finishDraft","isDraft","NodeTransforms","hanging","select","matchPath","isAtEnd","liftNodes","parentNodeEntry","toPath","moveNodes","splitPath","commonPath","isPreviousSibling","emptyAncestor","emptyRef","toRef","targets","depths","splitMode","k","keys","height","deleteRange","beforeRef","highest","voidMatch","nudge","voidNode","voidPath","afterPath","siblingHeight","afterRef","highestPath","lowestPath","obj","unwrapNodes","wrapNodes","roots","rootPath","a","commonNodeEntry","commonNode","wrapperPath","wrapper","SelectionTransforms","collapse","deselect","move","opts","setPoint","oldProps","newProps","TextTransforms","furthestVoid","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","inlineMatch","isInlineStart","isInlineEnd","middleRef"],"mappings":"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"}